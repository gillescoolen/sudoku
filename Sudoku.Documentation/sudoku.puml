@startuml sudoku

' State Pattern '
abstract IState {
  - game: Game
  + GetValue(): Integer
  + SetValue(value: Integer)
}

class DefinitiveState {
  + GetValue(): Integer
  + SetValue(value: Integer)
}

class HintState {
  + GetValue(): Integer
  + SetValue(value: Integer)
}

class CorrectionState {
  + GetValue(): Integer
  + SetValue(value: Integer)
}

' Visitor Pattern '
interface Visitor {
  + visitCell(cell: Cell)
}

class ValidateVisitor {
  + visitCell(cell: Cell)
}

class Game {
  - state: IState
  - type: String
  - components: Box[]
  + ChangeState()
  + UpdateCell(position: Position)
  + Solve()
}

interface ISudokuComponent {
  + IsValid(): Boolean
  + Accept(visitor: Visitor)
}

class Box {
  - cells: Cell[]
  + IsValid(): Boolean
}

class Cell {
  - definitiveValue: Integer
  - hintValue: Integer
  - position: Position
  + IsValid(): Boolean
  + GetValue(): Integer
  + Accept(visitor: Visitor)
  + SetValue(value: Integer)
}

class Position {
  - x: Integer
  - y: Integer
}

' Factory and Factory Pattern '
interface SudokuFactory {
  + CreateCells()
  + GetResult(): Game
}

class SamuraiSudokuFactory {
  + CreateCells()
  + GetResult(): Game
}

class JigsawSudokuFactory {
  + CreateCells()
  + GetResult(): Game
}

class NormalSudokuFactory {
  + CreateCells()
  + GetResult(): Game
}

interface SudokuParser {
  + Read(path: String): Cell[]
}

class SamuraiSudokuParser {
  + Read(path: String): Cell[]
}

class JigsawSudokuParser {
  + Read(path: String): Cell[]
}

class NormalSudokuParser {
  + Read(path: String): Cell[]
}

class SudokuReader {
  - parser: SudokuParser
  - factory: SudokuFactory
  - Start(type: string)
}

interface ISolutionStrategy {
  + Solve(game: Game)
}

class BacktrackSolution {
  + Solve(game: Game)
}

class BruteForceSolution {
  + Solve(game: Game)
}

' Relations '
HintState --|> IState
DefinitiveState --|> IState
CorrectionState --|> IState

BruteForceSolution --|> ISolutionStrategy
BacktrackSolution --|> ISolutionStrategy

ISolutionStrategy --- Game
IState --- Game

ValidateVisitor --|> Visitor

Box --|> ISudokuComponent
Cell --|> ISudokuComponent

Game *-- Box
Box *-- Cell
Cell --- Position
ISudokuComponent --> Visitor
ISudokuComponent <-- Visitor

SamuraiSudokuFactory --|> SudokuFactory
JigsawSudokuFactory --|> SudokuFactory
NormalSudokuFactory --|> SudokuFactory

SamuraiSudokuParser --|> SudokuParser
JigsawSudokuParser --|> SudokuParser
NormalSudokuParser --|> SudokuParser

SudokuReader --- SudokuParser
SudokuReader --- SudokuFactory

@enduml